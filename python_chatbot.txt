import datetime

class Chatbot:
    def __init__(self):
        self.history = []
        self.commands_used = {}
        self.greet()

    def greet(self):
        print("Chatbot: Hello! I’m your assistant! How can I help you today?")
        self.history.append("Chatbot: Hello! I’m your assistant! How can I help you today?")
        self.listen()

    def listen(self):
        user_input = input("User: ")
        self.history.append(f"User: {user_input}")
        self.process_input(user_input)

    def process_input(self, user_input):
        if user_input.lower() in ["hello", "hi"]:
            self.respond("Hi there! How can I help you today?")
        elif user_input.lower() == "todays date/time":
            now = datetime.datetime.now().strftime("%d %B %Y, %I:%M %p")
            self.respond(now)
            self.respond("How else can I assist you?")
        elif user_input.lower() == "list operations":
            self.respond("Please enter a list of integers (comma-separated, integer):")
            list_input = input("User: ")
            self.history.append(f"User: {list_input}")
            try:
                num_list = [int(x.strip()) for x in list_input.split(",")]
                self.list_operations(num_list)
            except ValueError:
                self.respond("The list must contain integers only.")
        elif user_input.lower() == "generate prime":
            self.respond("Enter the range (start and end):")
            range_input = input("User: ")
            self.history.append(f"User: {range_input}")
            try:
                start, end = [int(x.strip()) for x in range_input.split(",")]
                primes = self.generate_primes(start, end)
                self.respond(f"Prime Numbers: {primes}")
            except ValueError:
                self.respond("The range must contain integers only.")
        elif user_input.lower() == "search history":
            self.respond("Enter the keyword to search in chat history:")
            keyword = input("User: ")
            self.history.append(f"User: {keyword}")
            found_lines = [line for line in self.history if keyword.lower() in line.lower()]
            if found_lines:
                self.respond(f"Found the following lines:\n- " + "\n- ".join(found_lines))
            else:
                self.respond("No matching lines found.")
        elif user_input.lower() == "bye":
            summary = f"Here’s a summary of your session:\n- Commands Used: {len(self.commands_used)}\n- Most Frequent Command: {max(self.commands_used, key=self.commands_used.get)}"
            self.respond(summary)
            self.respond("Do you want to save this summary? (yes/no)")
            save_summary = input("User: ")
            if save_summary.lower() == "yes":
                filename = f"summary_{datetime.datetime.now().strftime('%d%m%Y')}.txt"
                with open(filename, 'w') as f:
                    f.write(summary)
                self.respond(f"Summary saved to {filename}")
                self.respond("Goodbye! Have a great day!")
                return
            else:
                self.respond("Goodbye! Have a great day!")
                return
        else:
            self.respond("Enter correct keyword")

        # Track command usage
        command = user_input.split()[0].lower()
        if command in self.commands_used:
            self.commands_used[command] += 1
        else:
            self.commands_used[command] = 1

        # Continue listening
        self.listen()

    def respond(self, response):
        print(f"Chatbot: {response}")
        self.history.append(f"Chatbot: {response}")

    def list_operations(self, num_list):
        sum_list = sum(num_list)
        max_list = max(num_list)
        reversed_list = num_list[::-1]
        
        self.respond(f"Sum: {sum_list}")
        self.respond(f"Maximum: {max_list}")
        self.respond(f"Reversed List: {reversed_list}")

        self.respond("Would you like to remove duplicates? (yes/no)")
        remove_duplicates = input("User: ")
        if remove_duplicates.lower() == "yes":
            updated_list = list(set(num_list))
            updated_list.sort()
            sum_updated_list = sum(updated_list)
            max_updated_list = max(updated_list)
            
            self.respond(f"Updated List: {updated_list}")
            self.respond(f"Sum: {sum_updated_list}")
            self.respond(f"Maximum: {max_updated_list}")
        
        # Continue listening
        self.listen()

    def generate_primes(self, start, end):
        primes = []
        for num in range(start, end + 1):
            if num > 1:
                for i in range(2, num):
                    if (num % i) == 0:
                        break
                else:
                    primes.append(num)
        return primes

# Create an instance of the Chatbot
chatbot = Chatbot()
